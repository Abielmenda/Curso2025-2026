# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

# Comentado para entrega
# !pip install rdflib

import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

# Crear el grafo y cargar datos
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage + "/rdf/data06.ttl", format="ttl")
report = Report()

# Namespaces
ns = Namespace("http://somewhere#")
people = Namespace("http://oeg.fi.upm.es/def/people#")

"""### TASK 7.1a
Listar todas las clases y sus superclases con RDFLib
Devuelve lista de tuplas (class, superclass) — None si no tiene superclase
"""

result = []

for c in g.subjects(RDF.type, RDFS.Class):
    superclasses = list(g.objects(c, RDFS.subClassOf))
    if superclasses:
        for sc in superclasses:
            result.append((c, sc))
    else:
        result.append((c, None))

# Visualización
for r in result:
    print(r)

# Validación
report.validate_07_1a(result)

"""### TASK 7.1b
Mismo ejercicio pero con SPARQL
"""

query = """
SELECT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
    print(r.c, r.sc)

report.validate_07_1b(query, g)

"""### TASK 7.2a
Listar todos los individuos de "Person" (y sus subclases) con RDFLib
"""

individuals = []

# Obtenemos todas las subclases recursivamente
def get_subclasses(cls):
    subclasses = set()
    for s in g.subjects(RDFS.subClassOf, cls):
        subclasses.add(s)
        subclasses |= get_subclasses(s)
    return subclasses

# Incluye la clase Person y todas sus subclases
person_classes = {ns.Person} | get_subclasses(ns.Person)

# Buscamos todos los individuos
for ind, _, cls in g.triples((None, RDF.type, None)):
    if cls in person_classes:
        individuals.append(ind)

for i in individuals:
    print(i)

report.validate_07_02a(individuals)

"""### TASK 7.2b
Mismo ejercicio con SPARQL
"""

query = """
SELECT DISTINCT ?ind
WHERE {
  {
    ?ind rdf:type ns:Person .
  }
  UNION {
    ?sub rdfs:subClassOf+ ns:Person .
    ?ind rdf:type ?sub .
  }
}
"""

for r in g.query(query):
    print(r.ind)

report.validate_07_02b(g, query)

"""### TASK 7.3
Listar nombre y tipo de quienes conocen a Rocky (SPARQL)
"""

query = """
SELECT ?name ?type
WHERE {
  ?ind ns:knows ns:Rocky .
  ?ind ns:name ?name .
  ?ind rdf:type ?type .
}
"""

for r in g.query(query):
    print(r.name, r.type)

report.validate_07_03(g, query)

"""### TASK 7.4
Listar el nombre de quienes tienen un colega con un perro,
o que tienen un colega que tiene un colega que tiene un perro (SPARQL)
"""

query = """
SELECT DISTINCT ?name
WHERE {
  {
    ?x ns:hasColleague ?y .
    ?y ns:hasPet ?pet .
    ?pet rdf:type ns:Dog .
    ?x ns:name ?name .
  }
  UNION {
    ?x ns:hasColleague ?y .
    ?y ns:hasColleague ?z .
    ?z ns:hasPet ?pet2 .
    ?pet2 rdf:type ns:Dog .
    ?x ns:name ?name .
  }
}
"""

for r in g.query(query):
    print(r.name)

report.validate_07_04(g, query)
report.save_report("_Task_07")



