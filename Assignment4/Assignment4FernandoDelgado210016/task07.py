#!pip install rdflib
# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
vistas = set()
for c in g.subjects(RDF.type, RDFS.Class):
    if c in vistas: #duplicado
        continue
    vistas.add(c)
    sc = g.value(subject=c, predicate=RDFS.subClassOf, object=None)  #none si no tiene superclase
    result.append((c, sc))
    
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  '''
        Select DISTINCT ?c ?sc WHERE
        {
            ?c a rdfs:Class .
            OPTIONAL { ?c rdfs:subClassOf ?sc. }
        }
        '''

for r in g.query(query):
    print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

# ----------------------------
# TASK 7.2a: List all individuals of "Person" with RDFLib
# ----------------------------
p = Namespace("http://oeg.fi.upm.es/def/people#")

# Variable a retornar
individuals = []

# Obtenemos todas las subclases transitivas de Person + la propia Person
classes = set(g.transitive_subjects(RDFS.subClassOf, p.Person)) | {p.Person}

# Todos los individuos con rdf:type en esas clases
individuals = sorted({s for c in classes for s in g.subjects(RDF.type, c)}, key=str)

# Mostrar resultados
for i in individuals:
    print(i)

# Validación
report.validate_07_02a(individuals)

# ----------------------------
# TASK 7.2b: Repeat the same in SPARQL
# ----------------------------
from rdflib.plugins.sparql import prepareQuery

query = prepareQuery('''
    SELECT ?ind WHERE {
        ?ind rdf:type ?c .
        ?c rdfs:subClassOf* ns:Person .
    }
''', initNs={"ns": p, "rdf": RDF, "rdfs": RDFS})

for r in g.query(query):
    print(r.ind)

# Validación
report.validate_07_02b(g, query)



# ----------------------------
# TASK 7.3: List the name and type of those who know Oscar
# ----------------------------
query = prepareQuery('''
SELECT ?name ?type WHERE {
    ?ind p:hasColleague p:Oscar .
    ?ind rdf:type ?type .
    OPTIONAL { ?ind p:hasName ?name . }
    OPTIONAL { ?ind rdfs:label ?name . }
}
''', initNs={"p": p, "rdf": RDF, "rdfs": RDFS})

# Mostrar resultados
for r in g.query(query):
    # En caso de que ?name esté vacío, usar label como fallback
    name_value = r.name if r.name else None
    print(name_value, r.type)

# Validación
report.validate_07_03(g, query)


# ----------------------------
# ----------------------------
# TASK 7.4: List the name of those entities who have a colleague or a colleague-of-colleague
# ----------------------------
query = prepareQuery('''SELECT DISTINCT ?name WHERE {
    {
        ?ind rdfs:label ?name .
        ?ind p:hasColleague ?c1 .
    }
    UNION
    {
        ?ind rdfs:label ?name .
        ?ind p:hasColleague ?c1 .
        ?c1 p:hasColleague ?c2 .
    }
}''', initNs={"p": p, "rdfs": RDFS})

for r in g.query(query):
    print(r.name)

report.validate_07_04(g, query)

report.save_report("_Task_07")
