# -*- coding: utf-8 -*-
"""Task07_2025

Automatically generated by Colab.

Task 07: Querying RDF(s)
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

# --- Load RDF ---
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage + "/rdf/data06.ttl", format="TTL")
report = Report()

# ==========================================================
# TASK 7.1a - RDFLib
# ==========================================================
result = []

# Recolectar todas las clases explícitas o como sujeto de subClassOf
classes = set(g.subjects(RDF.type, RDFS.Class)) | set(g.subjects(RDFS.subClassOf, None))

# Para cada clase, añadir tuplas (c, sc); si no hay superclase, (c, None)
for c in classes:
    supercs = list(g.objects(c, RDFS.subClassOf))
    if supercs:
        for sc in supercs:
            result.append((c, sc))
    else:
        result.append((c, None))

for r_ in result:
    print(r_)

# Validation
report.validate_07_1a(result)

# ==========================================================
# TASK 7.1b - SPARQL
# ==========================================================
query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?c ?sc
WHERE {
  {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc }
  }
  UNION
  {
    ?c rdfs:subClassOf ?sc .
  }
}
"""

for r in g.query(query):
    print(r.c, r.sc)

report.validate_07_1b(query, g)

# ==========================================================
# TASK 7.2a - RDFLib
# ==========================================================
ns = Namespace("http://oeg.fi.upm.es/def/people#")

# Obtener subclases transitivas de Person
subclasses = set([ns.Person])
fringe = [ns.Person]
while fringe:
    cur = fringe.pop()
    for sc in g.subjects(RDFS.subClassOf, cur):
        if sc not in subclasses:
            subclasses.add(sc)
            fringe.append(sc)

# Obtener individuos de Person o sus subclases
individuals = []
for klass in subclasses:
    for ind in g.subjects(RDF.type, klass):
        if ind not in individuals:
            individuals.append(ind)

for i in individuals:
    print(i)

report.validate_07_02a(individuals)

# ==========================================================
# TASK 7.2b - SPARQL
# ==========================================================
query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>

SELECT ?ind
WHERE {
  ?ind rdf:type ?c .
  ?c rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(query):
    print(r.ind)

report.validate_07_02b(g, query)

# ==========================================================
# TASK 7.3 - SPARQL
# ==========================================================
query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>
PREFIX person:   <http://oeg.fi.upm.es/resource/person/>

SELECT ?name ?type
WHERE {
  ?x ontology:knows person:Rocky .
  ?x ontology:hasName ?name .
  ?x rdf:type ?type .
}
"""

for r in g.query(query):
    print(r.name, r.type)

report.validate_07_03(g, query)

# ==========================================================
# TASK 7.4 - SPARQL
# ==========================================================
query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  {
    ?x ontology:hasColleague ?c .
    ?c ontology:hasPet ?d .
    ?d rdf:type ontology:Dog .
  }
  UNION
  {
    ?x ontology:hasColleague ?c1 .
    ?c1 ontology:hasColleague ?c2 .
    ?c2 ontology:hasPet ?d2 .
    ?d2 rdf:type ontology:Dog .
  }
  ?x ontology:hasName ?name .
}
"""

for r in g.query(query):
    print(r.name)

report.validate_07_04(g, query)

# ==========================================================
# SAVE REPORT
# ==========================================================
report.save_report("_Task_07")

